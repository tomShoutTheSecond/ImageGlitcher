{"version":3,"sources":["Colors.tsx","Styles.tsx","ImageLoader.tsx","Util.tsx","FramePreview.tsx","ImageProcessor.tsx","AnimationPreview.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","background","border","accent","fill","Styles","h1Style","padding","margin","h2Style","fontSize","imageStyle","maxWidth","maxHeight","ImageLoader","state","previewUrl","containerStyle","verticalAlign","borderWidth","borderStyle","borderColor","display","style","paddingBottom","ref","type","id","name","onChange","loadImage","src","this","imageFile","refs","fileInput","files","fileReader","FileReader","readAsArrayBuffer","onloadend","result","rawData","Uint8Array","State","setImageData","readAsDataURL","setState","React","Component","Util","val0","val1","mix","FramePreview","instance","downloadContainerStyle","content","props","isLoading","downloads","map","download","key","className","href","onClick","createGif","setAnimationLoadingState","newImg","Image","onload","width","height","gif","GIF","workers","quality","getImageElements","forEach","img","addFrame","delay","on","blob","url","URL","createObjectURL","setAnimationUrl","render","firstImage","thisNode","ReactDOM","findDOMNode","Array","from","getElementsByClassName","ImageProcessor","bigButtonStyle","color","float","htmlFor","defaultValue","value","prepareToProcessAnimation","clearDownloads","setFrameLoadingState","setTimeout","processAnimation","framesInput","frames","parseInt","boomerang","boomerangInput","checked","startFreqInput","endFreqInput","startPhaseInput","endPhaseInput","startAmpInput","endAmpInput","startOffsetInput","endOffsetInput","startFreq","parseFloat","endFreq","startPhase","endPhase","startAmp","endAmp","startOffset","endOffset","i","progress","frameFrequency","mixNumber","framePhase","frameAmp","frameOffset","processFrame","frequency","phase","amp","offset","imageData","decodedFile","decodeFile","processedData","bufferProcess","encodedFile","encodeFile","saveByteArray","encodingInput","alawmulaw","mulaw","encode","alaw","decode","buffer","processedBuffer","length","sample","push","angle","processedSample","Math","sin","data","Blob","window","addDownload","AnimationPreview","downloadButton","imagePreview","app","newDownloads","animationUrl","animationIsLoading","frameIsLoading","App","Boolean","location","hostname","match","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0a2b059.chunk.js","sourcesContent":["export class Colors\r\n{\r\n    static background = \"#CACACA\";\r\n    static border = \"#999\";\r\n    static accent = \"#fff\";\r\n    static fill = \"#222\";\r\n}","export class Styles\r\n{\r\n    static h1Style : React.CSSProperties = \r\n    {\r\n        padding: 0,\r\n        margin: \"0 0 16px 0\"\r\n    };\r\n\r\n    static h2Style : React.CSSProperties = \r\n    {\r\n        fontSize: \"20px\",\r\n        padding: 0,\r\n        margin: \"0 0 16px 0\"\r\n    };\r\n\r\n    static imageStyle : React.CSSProperties = \r\n    {\r\n        maxWidth: 240,\r\n        maxHeight: 240\r\n    };\r\n}","import React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\n\nexport class ImageLoader extends React.Component\n{\n    state = { previewUrl: \"\" };\n\n    render()\n    {\n        let containerStyle : React.CSSProperties = \n        {\n            margin: \"16px\",\n            padding: \"16px\",\n            verticalAlign: \"top\",\n            background: Colors.background,\n            borderWidth: 1,\n            borderStyle: \"solid\",\n            borderColor: Colors.border,\n            display: \"inline-block\"\n        };\n\n        let innerContainerStyle : React.CSSProperties = \n        {\n            paddingBottom: \"16px\"\n        };\n\n        return (\n            <div style={containerStyle}>\n                <h1 style={Styles.h1Style}>Load Image</h1>\n                <p>.bmp files only</p>\n                <div style={innerContainerStyle}>\n                    <input ref=\"fileInput\" type=\"file\" id=\"files\" name=\"file\" onChange={() => this.loadImage()}/>\n                </div>\n                <img src={this.state.previewUrl} style={Styles.imageStyle}/>\n            </div>\n        );\n    }\n\n    loadImage()\n    {\n        let fileInput = this.refs.fileInput as HTMLInputElement;\n        let imageFile = fileInput.files![0];\n        \n        let fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(imageFile);\n\n        fileReader.onloadend = () =>\n        {\n            //get data from file\n            let result = fileReader.result as ArrayBuffer;\n            let rawData = new Uint8Array(result);\n            State.setImageData(rawData);\n\n            //put preview in component\n            fileReader.readAsDataURL(imageFile);\n\n            fileReader.onloadend = () =>\n            {\n                this.setState({previewUrl: fileReader.result});\n            }\n        }\n    }\n}\n","export class Util\r\n{\r\n    static mixNumber(val0 : number, val1 : number, mix : number)\r\n    {\r\n        return val0 * mix + val1 * (1 - mix);\r\n    }\r\n}","import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface FramePreviewProps\r\n{\r\n    downloads : string[],\r\n    isLoading : boolean\r\n}\r\n\r\nexport class FramePreview extends React.Component<FramePreviewProps>\r\n{\r\n    static instance : FramePreview | null = null;\r\n\r\n    componentDidMount()\r\n    {\r\n        FramePreview.instance = this;\r\n    }\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            margin: \"16px\",\r\n            padding: \"16px\",\r\n            verticalAlign: \"top\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n        };\r\n\r\n        let downloadContainerStyle : React.CSSProperties = \r\n        {\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let content = this.props.isLoading ? \"Loading frames...\" : this.props.downloads.map((download, key) => \r\n            <div key={key} style={downloadContainerStyle}>\r\n                <img className=\"downloadImg\" src={download} style={Styles.imageStyle}></img>\r\n                <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\r\n            </div>\r\n        )\r\n        \r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Frames</h1>\r\n                {content}\r\n                <br />\r\n                <button onClick={() => this.createGif()}>Convert to GIF</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGif()\r\n    {\r\n        State.setAnimationLoadingState(true);\r\n\r\n        //first find the actual image size of the first frame\r\n        var newImg = new Image();\r\n        newImg.onload = () =>\r\n        {\r\n            let width = newImg.width;\r\n            let height = newImg.height;\r\n\r\n            //@ts-ignore\r\n            let gif = new GIF(\r\n            {\r\n                workers: 2,\r\n                quality: 10,\r\n                width: width,\r\n                height: height\r\n            });\r\n\r\n            //add frames to gif\r\n            let imgElements = this.getImageElements();\r\n            imgElements.forEach(img => \r\n            {\r\n                gif.addFrame(img, {delay: 10});\r\n            });\r\n            \r\n            gif.on('finished', function(blob : Blob) \r\n            {\r\n                let url = URL.createObjectURL(blob);\r\n                State.setAnimationUrl(url);\r\n                State.setAnimationLoadingState(false);\r\n            });\r\n            \r\n            gif.render();\r\n        }\r\n\r\n        let firstImage = this.getImageElements()[0] as HTMLImageElement;\r\n        newImg.src = firstImage.src;\r\n    }\r\n\r\n    //returns references to all the preview image elements in the download area\r\n    getImageElements()\r\n    {\r\n        let thisNode = ReactDOM.findDOMNode(this)! as Element;\r\n        return Array.from(thisNode.getElementsByClassName('downloadImg'));\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\nimport { Util } from './Util';\r\nimport { FramePreview } from './FramePreview';\r\n\r\ninterface ImageProcessorProps\r\n{\r\n    imageData : Uint8Array\r\n}\r\n\r\nexport class ImageProcessor extends React.Component<ImageProcessorProps>\r\n{\r\n    state = { previewUrl: \"\" };\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            margin: \"16px\",\r\n            padding: \"16px\",\r\n            verticalAlign: \"top\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let bigButtonStyle : React.CSSProperties = \r\n        {\r\n            color: Colors.accent,\r\n            background: Colors.fill,\r\n            border: \"none\",\r\n            fontSize: \"16px\",\r\n            padding: \"16px\",\r\n            float: \"right\"\r\n        };\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Process Image</h1>\r\n                <label htmlFor=\"frames\">Frames</label> <input id=\"frames\" ref=\"framesInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"boomerang\">Boomerang</label> <input id=\"boomerang\" ref=\"boomerangInput\" type=\"checkbox\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"encoding\">Encoding algorithm </label>\r\n                <select id=\"encoding\" ref=\"encodingInput\">\r\n                    <option value=\"mulaw\">μ-law</option>\r\n                    <option value=\"alaw\">a-law</option>\r\n                </select>\r\n                <br />\r\n                <br />\r\n                <h2 style={Styles.h2Style}>Amplitude Modulation</h2>\r\n                <label htmlFor=\"startFreq\">Start Frequency</label> <input id=\"startFreq\" ref=\"startFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <label htmlFor=\"endFreq\">End Frequency</label> <input id=\"endFreq\" ref=\"endFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startPhase\">Start Phase</label> <input id=\"startPhase\" ref=\"startPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <label htmlFor=\"endPhase\">End Phase</label> <input id=\"endPhase\" ref=\"endPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startAmp\">Start Amp</label> <input id=\"startAmp\" ref=\"startAmpInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <label htmlFor=\"endAmp\">End Amp</label> <input id=\"endAmp\" ref=\"endAmpInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startOffset\">Start DC Offset</label> <input id=\"startOffset\" ref=\"startOffsetInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <label htmlFor=\"endOffset\">End DC Offset</label> <input id=\"endOffset\" ref=\"endOffsetInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <br />\r\n                <button style={bigButtonStyle} onClick={() => this.prepareToProcessAnimation()}>Process</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    prepareToProcessAnimation()\r\n    {\r\n        //clear downloads area\r\n        State.clearDownloads();\r\n        State.setFrameLoadingState(true);\r\n\r\n        //wait to let renderer catch up\r\n        let waitTime = 200;\r\n        setTimeout(() => this.processAnimation(), waitTime);\r\n    }\r\n\r\n    processAnimation()\r\n    {\r\n        let framesInput = this.refs.framesInput as HTMLInputElement;\r\n        let frames = parseInt(framesInput.value);\r\n\r\n        let boomerangInput = this.refs.boomerangInput as HTMLInputElement;\r\n        let boomerang = boomerangInput.checked;\r\n\r\n        let startFreqInput = this.refs.startFreqInput as HTMLInputElement;\r\n        let endFreqInput = this.refs.endFreqInput as HTMLInputElement;\r\n        let startPhaseInput = this.refs.startPhaseInput as HTMLInputElement;\r\n        let endPhaseInput = this.refs.endPhaseInput as HTMLInputElement;\r\n        let startAmpInput = this.refs.startAmpInput as HTMLInputElement;\r\n        let endAmpInput = this.refs.endAmpInput as HTMLInputElement;\r\n        let startOffsetInput = this.refs.startOffsetInput as HTMLInputElement;\r\n        let endOffsetInput = this.refs.endOffsetInput as HTMLInputElement;\r\n\r\n        let startFreq = parseFloat(startFreqInput.value);\r\n        let endFreq = parseFloat(endFreqInput.value);\r\n        let startPhase = parseFloat(startPhaseInput.value);\r\n        let endPhase = parseFloat(endPhaseInput.value);\r\n        let startAmp = parseFloat(startAmpInput.value);\r\n        let endAmp = parseFloat(endAmpInput.value);\r\n        let startOffset = parseFloat(startOffsetInput.value);\r\n        let endOffset = parseFloat(endOffsetInput.value);\r\n\r\n        for (let i = 0; i < frames; i++) \r\n        {\r\n            let progress = i / frames;\r\n            let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\r\n            let framePhase = Util.mixNumber(startPhase, endPhase, progress);\r\n            let frameAmp = Util.mixNumber(startAmp, endAmp, progress);\r\n            let frameOffset = Util.mixNumber(startOffset, endOffset, progress);\r\n\r\n            this.processFrame(frameFrequency, framePhase, frameAmp, frameOffset);\r\n        }\r\n\r\n        if(boomerang)\r\n        {\r\n            for (let i = 0; i < frames; i++) \r\n            {\r\n                let progress = 1 - (i / frames);\r\n                let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\r\n                let framePhase = Util.mixNumber(startPhase, endPhase, progress);\r\n                let frameAmp = Util.mixNumber(startAmp, endAmp, progress);\r\n                let frameOffset = Util.mixNumber(startOffset, endOffset, progress);\r\n\r\n                this.processFrame(frameFrequency, framePhase, frameAmp, frameOffset);\r\n            }\r\n        }\r\n\r\n        State.setFrameLoadingState(false);\r\n\r\n        //create animation (once image previews are loaded)\r\n        let waitTime = 1000;\r\n        setTimeout(() => FramePreview.instance?.createGif(), waitTime);\r\n    }\r\n\r\n    processFrame(frequency : number, phase : number, amp : number, offset : number)\r\n    {\r\n        //get data from file\r\n        let rawData = this.props.imageData;\r\n        \r\n        //decode data\r\n        let decodedFile = this.decodeFile(rawData);\r\n\r\n        //process data\r\n        let processedData = this.bufferProcess(decodedFile, frequency, phase, amp, offset);\r\n\r\n        //encode data\r\n        let encodedFile = this.encodeFile(processedData);\r\n        \r\n        this.saveByteArray(encodedFile);\r\n    }\r\n\r\n    encodeFile(rawData : number[])\r\n    {\r\n        let encodingInput = this.refs.encodingInput as HTMLInputElement;\r\n        let encodingAlgorithm = encodingInput.value;\r\n\r\n        //@ts-ignore\r\n        return encodingAlgorithm === \"mulaw\" ? alawmulaw.mulaw.encode(rawData) : alawmulaw.alaw.encode(rawData);\r\n    }\r\n\r\n    decodeFile(rawData : Uint8Array)\r\n    {\r\n        let encodingInput = this.refs.encodingInput as HTMLInputElement;\r\n        let encodingAlgorithm = encodingInput.value;\r\n\r\n        //@ts-ignore\r\n        return encodingAlgorithm === \"mulaw\" ? alawmulaw.mulaw.decode(rawData) : alawmulaw.alaw.decode(rawData);\r\n    }\r\n\r\n    bufferProcess(buffer : any, frequency : number, phase : number, amp : number, offset : number)\r\n    {\r\n        let headerLength = 54;\r\n\r\n        let processedBuffer = [];\r\n        for (let i = 0; i < buffer.length; i++) \r\n        {\r\n            const sample = buffer[i];\r\n\r\n            if(i < headerLength)\r\n            {\r\n                processedBuffer.push(sample);\r\n                continue;\r\n            }\r\n\r\n            let angle = phase + i * frequency;\r\n            let coef = offset + Math.sin(angle) * amp;\r\n\r\n            let processedSample = sample * coef;\r\n            processedBuffer.push(processedSample);\r\n        }\r\n\r\n        return processedBuffer;\r\n    }\r\n\r\n    saveByteArray(data : any)\r\n    {\r\n        let blob = new Blob([data], {type: \"image/bmp\"});\r\n        let url = window.URL.createObjectURL(blob);\r\n\r\n        State.addDownload(url);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\n\r\ninterface AnimationPreviewProps\r\n{\r\n    url : string,\r\n    isLoading : boolean\r\n}\r\n\r\nexport class AnimationPreview extends React.Component<AnimationPreviewProps>\r\n{\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            margin: \"16px\",\r\n            padding: \"16px\",\r\n            verticalAlign: \"top\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let downloadButton = this.props.isLoading || this.props.url == \"\" ? null : <a href={this.props.url}>Download</a>;\r\n        let imagePreview = this.props.isLoading ? \"Loading animation...\" : <img style={Styles.imageStyle} src={this.props.url}/>;\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Animation</h1>\r\n                {imagePreview}\r\n                {downloadButton}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { CSSProperties } from 'react';\nimport { ImageLoader } from './ImageLoader';\nimport { ImageProcessor } from './ImageProcessor';\nimport { FramePreview } from './FramePreview';\nimport { AnimationPreview } from './AnimationPreview';\n\nexport class State\n{\n    static app : App;\n\n    static setImageData(imageData : Uint8Array)\n    {\n        this.app.setState({imageData: imageData});\n    }\n\n    static addDownload(url : string)\n    {\n        let newDownloads = this.app.state.downloads;\n        newDownloads.push(url);\n        this.app.setState({ downloads: newDownloads });\n    }\n\n    static clearDownloads()\n    {\n        this.app.state.downloads.length = 0;\n    }\n\n    static setAnimationUrl(url : string)\n    {\n        this.app.setState({ animationUrl: url });\n    }\n\n    static setAnimationLoadingState(isLoading : boolean)\n    {\n        this.app.setState({ animationIsLoading: isLoading });\n    }\n\n    static setFrameLoadingState(isLoading : boolean)\n    {\n        this.app.setState({ frameIsLoading: isLoading });\n    }\n}\n\ninterface AppProps\n{\n\n}\n\ninterface AppState\n{\n    imageData : Uint8Array,\n    downloads : string[],\n    animationUrl : string,\n    frameIsLoading : boolean,\n    animationIsLoading : boolean\n}\n\nclass App extends React.Component<AppProps, AppState>\n{\n    state : AppState = { imageData: new Uint8Array(), downloads: [], animationUrl: \"\", frameIsLoading: false, animationIsLoading: false};\n\n    componentDidMount()\n    {\n        //provide App reference to State\n        State.app = this;\n    }\n\n    render()\n    {\n        let containerStyle : CSSProperties = \n        {\n            padding: \"16px\"\n        }\n\n        return (\n            <div style={containerStyle}>\n                <ImageLoader />\n                <ImageProcessor imageData={this.state.imageData} />\n                <AnimationPreview url={this.state.animationUrl} isLoading={this.state.animationIsLoading} />\n                <FramePreview downloads={this.state.downloads} isLoading={this.state.frameIsLoading}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}