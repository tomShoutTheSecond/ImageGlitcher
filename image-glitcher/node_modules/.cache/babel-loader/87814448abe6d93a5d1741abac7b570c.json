{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { ImageLoader } from './ImageLoader';\nimport { ImageProcessor } from './ImageProcessor';\nexport class State {\n  static setImageData(imageData) {\n    this.appInstance.setState({\n      imageData: imageData\n    });\n  }\n\n}\nState.appInstance = void 0;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.downloads = [];\n    this.state = {\n      imageData: []\n    };\n  }\n\n  componentDidMount() {\n    //provide App reference to State\n    State.appInstance = this;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ImageLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ImageProcessor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }), this.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: download,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      download: \"image.bmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }\n    }, \"image-\" + key))));\n  }\n\n  processImage() {\n    //get data from file\n    let rawData = this.state.imageData; //decode data\n    //@ts-ignore\n\n    let decodedFile = alawmulaw.mulaw.decode(rawData); //process data\n\n    let processedData = this.bufferProcess(decodedFile); //encode data\n    //@ts-ignore\n\n    let encodedFile = alawmulaw.mulaw.encode(processedData);\n    this.saveByteArray(encodedFile);\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob([data], {\n      type: \"image/bmp\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    this.downloads.push(url);\n    this.setState({});\n  }\n\n  bufferProcess(buffer) {\n    let headerLength = 4000;\n    let frequencyInput = this.refs.frequencyInput;\n    let frequency = parseFloat(frequencyInput.value);\n    let processedBuffer = [];\n\n    for (let i = 0; i < buffer.length; i++) {\n      const sample = buffer[i];\n\n      if (i < headerLength) {\n        processedBuffer.push(sample);\n        continue;\n      }\n\n      let angle = i * frequency;\n      let amp = Math.sin(angle);\n      let processedSample = sample * amp;\n      processedBuffer.push(processedSample);\n    }\n\n    return processedBuffer;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/App.tsx"],"names":["React","ImageLoader","ImageProcessor","State","setImageData","imageData","appInstance","setState","App","Component","downloads","state","componentDidMount","render","map","download","key","processImage","rawData","decodedFile","alawmulaw","mulaw","decode","processedData","bufferProcess","encodedFile","encode","saveByteArray","data","blob","Blob","type","url","window","URL","createObjectURL","push","buffer","headerLength","frequencyInput","refs","frequency","parseFloat","value","processedBuffer","i","length","sample","angle","amp","Math","sin","processedSample"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ImageLoader } from './ImageLoader';\nimport { ImageProcessor } from './ImageProcessor';\n\nexport class State\n{\n    static appInstance : App;\n\n    static setImageData(imageData : Uint8Array)\n    {\n        this.appInstance.setState({imageData: imageData});\n    }\n}\n\nclass App extends React.Component\n{\n    downloads : string[] = [];\n    state = { imageData: [] };\n\n    componentDidMount()\n    {\n        //provide App reference to State\n        State.appInstance = this;\n    }\n\n    render()\n    {\n        return (\n            <div>\n                <ImageLoader />\n                <ImageProcessor />\n                {this.downloads.map((download, key) => \n                    <div key={key}>\n                        <img src={download}></img>\n                        <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    processImage()\n    {\n        //get data from file\n        let rawData = this.state.imageData;\n        \n        //decode data\n        //@ts-ignore\n        let decodedFile = alawmulaw.mulaw.decode(rawData);\n\n        //process data\n        let processedData = this.bufferProcess(decodedFile);\n\n        //encode data\n        //@ts-ignore\n        let encodedFile = alawmulaw.mulaw.encode(processedData);\n        \n        this.saveByteArray(encodedFile);\n    }\n\n    saveByteArray(data : any)\n    {\n        let blob = new Blob([data], {type: \"image/bmp\"});\n        let url = window.URL.createObjectURL(blob);\n\n        this.downloads.push(url);\n\n        this.setState({});\n    }\n\n    bufferProcess(buffer : any)\n    {\n        let headerLength = 4000;\n\n        let frequencyInput = this.refs.frequencyInput as HTMLInputElement;\n        let frequency = parseFloat(frequencyInput.value);\n\n        let processedBuffer = [];\n        for (let i = 0; i < buffer.length; i++) \n        {\n            const sample = buffer[i];\n\n            if(i < headerLength)\n            {\n                processedBuffer.push(sample);\n                continue;\n            }\n\n            let angle = i * frequency;\n            let amp = Math.sin(angle);\n\n            let processedSample = sample * amp;\n            processedBuffer.push(processedSample);\n        }\n\n        return processedBuffer;\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}