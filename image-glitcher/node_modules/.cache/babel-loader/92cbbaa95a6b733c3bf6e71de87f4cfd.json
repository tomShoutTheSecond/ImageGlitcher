{"ast":null,"code":"/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview A-Law codec.\r\n */\n\n/** @module alawmulaw/alaw */\n\n/** @type {!Array<number>} */\nconst LOG_TABLE = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit A-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\n\nexport function encodeSample(sample) {\n  /** @type {number} */\n  let compandedValue;\n  sample = sample == -32768 ? -32767 : sample;\n  /** @type {number} */\n\n  let sign = ~sample >> 8 & 0x80;\n\n  if (!sign) {\n    sample = sample * -1;\n  }\n\n  if (sample > 32635) {\n    sample = 32635;\n  }\n\n  if (sample >= 256) {\n    /** @type {number} */\n    let exponent = LOG_TABLE[sample >> 8 & 0x7F];\n    /** @type {number} */\n\n    let mantissa = sample >> exponent + 3 & 0x0F;\n    compandedValue = exponent << 4 | mantissa;\n  } else {\n    compandedValue = sample >> 4;\n  }\n\n  return compandedValue ^ (sign ^ 0x55);\n}\n/**\r\n * Decode a 8-bit A-Law sample as 16-bit PCM.\r\n * @param {number} aLawSample The 8-bit A-Law sample\r\n * @return {number}\r\n */\n\nexport function decodeSample(aLawSample) {\n  /** @type {number} */\n  let sign = 0;\n  aLawSample ^= 0x55;\n\n  if (aLawSample & 0x80) {\n    aLawSample &= ~(1 << 7);\n    sign = -1;\n  }\n  /** @type {number} */\n\n\n  let position = ((aLawSample & 0xF0) >> 4) + 4;\n  /** @type {number} */\n\n  let decoded = 0;\n\n  if (position != 4) {\n    decoded = 1 << position | (aLawSample & 0x0F) << position - 4 | 1 << position - 5;\n  } else {\n    decoded = aLawSample << 1 | 1;\n  }\n\n  decoded = sign === 0 ? decoded : -decoded;\n  return decoded * 8 * -1;\n}\n/**\r\n * Encode 16-bit linear PCM samples as 8-bit A-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\n\nexport function encode(samples) {\n  /** @type {!Uint8Array} */\n  let aLawSamples = new Uint8Array(samples.length);\n\n  for (let i = 0; i < samples.length; i++) {\n    aLawSamples[i] = encodeSample(samples[i]);\n  }\n\n  return aLawSamples;\n}\n/**\r\n * Decode 8-bit A-Law samples into 16-bit linear PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit A-Law samples.\r\n * @return {!Int16Array}\r\n */\n\nexport function decode(samples) {\n  /** @type {!Int16Array} */\n  let pcmSamples = new Int16Array(samples.length);\n\n  for (let i = 0; i < samples.length; i++) {\n    pcmSamples[i] = decodeSample(samples[i]);\n  }\n\n  return pcmSamples;\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/node_modules/alawmulaw/lib/alaw.js"],"names":["LOG_TABLE","encodeSample","sample","compandedValue","sign","exponent","mantissa","decodeSample","aLawSample","position","decoded","encode","samples","aLawSamples","Uint8Array","length","i","decode","pcmSamples","Int16Array"],"mappings":"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","sourcesContent":["/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A-Law codec.\r\n */\r\n\r\n/** @module alawmulaw/alaw */\r\n\r\n/** @type {!Array<number>} */\r\nconst LOG_TABLE = [\r\n  1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5, \r\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, \r\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7 \r\n];\r\n\r\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit A-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\r\nexport function encodeSample(sample) {\r\n  /** @type {number} */\r\n  let compandedValue; \r\n  sample = (sample ==-32768) ? -32767 : sample;\r\n  /** @type {number} */\r\n  let sign = ((~sample) >> 8) & 0x80; \r\n  if (!sign) {\r\n    sample = sample * -1; \r\n  }\r\n  if (sample > 32635) {\r\n    sample = 32635; \r\n  }\r\n  if (sample >= 256)  {\r\n    /** @type {number} */\r\n    let exponent = LOG_TABLE[(sample >> 8) & 0x7F];\r\n    /** @type {number} */\r\n    let mantissa = (sample >> (exponent + 3) ) & 0x0F; \r\n    compandedValue = ((exponent << 4) | mantissa); \r\n  } else {\r\n    compandedValue = sample >> 4; \r\n  } \r\n  return compandedValue ^ (sign ^ 0x55);\r\n}\r\n\r\n/**\r\n * Decode a 8-bit A-Law sample as 16-bit PCM.\r\n * @param {number} aLawSample The 8-bit A-Law sample\r\n * @return {number}\r\n */\r\nexport function decodeSample(aLawSample) {\r\n  /** @type {number} */\r\n  let sign = 0;\r\n  aLawSample ^= 0x55;\r\n  if (aLawSample & 0x80) {\r\n    aLawSample &= ~(1 << 7);\r\n    sign = -1;\r\n  }\r\n  /** @type {number} */\r\n  let position = ((aLawSample & 0xF0) >> 4) + 4;\r\n  /** @type {number} */\r\n  let decoded = 0;\r\n  if (position != 4) {\r\n    decoded = ((1 << position) |\r\n      ((aLawSample & 0x0F) << (position - 4)) |\r\n      (1 << (position - 5)));\r\n  } else {\r\n    decoded = (aLawSample << 1)|1;\r\n  }\r\n  decoded = (sign === 0) ? (decoded) : (-decoded);\r\n  return (decoded * 8) * -1;\r\n}\r\n\r\n/**\r\n * Encode 16-bit linear PCM samples as 8-bit A-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Uint8Array} */\r\n  let aLawSamples = new Uint8Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    aLawSamples[i] = encodeSample(samples[i]);\r\n  }\r\n  return aLawSamples;\r\n}\r\n\r\n/**\r\n * Decode 8-bit A-Law samples into 16-bit linear PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit A-Law samples.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(samples) {\r\n  /** @type {!Int16Array} */\r\n  let pcmSamples = new Int16Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    pcmSamples[i] = decodeSample(samples[i]);\r\n  }\r\n  return pcmSamples;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}