{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\ImageProcessor.tsx\";\nimport React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\nexport class ImageProcessor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewUrl: \"\"\n    };\n  }\n\n  render() {\n    let containerStyle = {\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: Colors.border,\n      display: \"inline-block\"\n    };\n    let innerContainerStyle = {\n      paddingBottom: \"16px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: Styles.h1Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, \"Process Image\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"frequency\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, \"Frequency \"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"frequency\",\n      ref: \"frequencyInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 63\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.processImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }, \"Process\"));\n  }\n\n  processImage() {\n    //get data from file\n    let rawData = this.props.imageData; //decode data\n    //@ts-ignore\n\n    let decodedFile = alawmulaw.mulaw.decode(rawData); //process data\n\n    let processedData = this.bufferProcess(decodedFile); //encode data\n    //@ts-ignore\n\n    let encodedFile = alawmulaw.mulaw.encode(processedData);\n    this.saveByteArray(encodedFile);\n  }\n\n  bufferProcess(buffer) {\n    let headerLength = 4000;\n    let frequencyInput = this.refs.frequencyInput;\n    let frequency = parseFloat(frequencyInput.value);\n    let processedBuffer = [];\n\n    for (let i = 0; i < buffer.length; i++) {\n      const sample = buffer[i];\n\n      if (i < headerLength) {\n        processedBuffer.push(sample);\n        continue;\n      }\n\n      let angle = i * frequency;\n      let amp = Math.sin(angle);\n      let processedSample = sample * amp;\n      processedBuffer.push(processedSample);\n    }\n\n    return processedBuffer;\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob([data], {\n      type: \"image/bmp\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    State.addDownload(url);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/ImageProcessor.tsx"],"names":["React","State","Colors","Styles","ImageProcessor","Component","state","previewUrl","render","containerStyle","padding","background","borderWidth","borderStyle","borderColor","border","display","innerContainerStyle","paddingBottom","h1Style","processImage","rawData","props","imageData","decodedFile","alawmulaw","mulaw","decode","processedData","bufferProcess","encodedFile","encode","saveByteArray","buffer","headerLength","frequencyInput","refs","frequency","parseFloat","value","processedBuffer","i","length","sample","push","angle","amp","Math","sin","processedSample","data","blob","Blob","type","url","window","URL","createObjectURL","addDownload"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\n\r\ninterface ImageProcessorProps\r\n{\r\n    imageData : Uint8Array\r\n}\r\n\r\nexport class ImageProcessor extends React.Component<ImageProcessorProps>\r\n{\r\n    state = { previewUrl: \"\" };\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            padding: \"16px\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let innerContainerStyle : React.CSSProperties = \r\n        {\r\n            paddingBottom: \"16px\"\r\n        };\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Process Image</h1>\r\n                <label htmlFor=\"frequency\">Frequency </label> <input id=\"frequency\" ref=\"frequencyInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <br />\r\n                <button onClick={() => this.processImage()}>Process</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    processImage()\r\n    {\r\n        //get data from file\r\n        let rawData = this.props.imageData;\r\n        \r\n        //decode data\r\n        //@ts-ignore\r\n        let decodedFile = alawmulaw.mulaw.decode(rawData);\r\n\r\n        //process data\r\n        let processedData = this.bufferProcess(decodedFile);\r\n\r\n        //encode data\r\n        //@ts-ignore\r\n        let encodedFile = alawmulaw.mulaw.encode(processedData);\r\n        \r\n        this.saveByteArray(encodedFile);\r\n    }\r\n\r\n    bufferProcess(buffer : any)\r\n    {\r\n        let headerLength = 4000;\r\n\r\n        let frequencyInput = this.refs.frequencyInput as HTMLInputElement;\r\n        let frequency = parseFloat(frequencyInput.value);\r\n\r\n        let processedBuffer = [];\r\n        for (let i = 0; i < buffer.length; i++) \r\n        {\r\n            const sample = buffer[i];\r\n\r\n            if(i < headerLength)\r\n            {\r\n                processedBuffer.push(sample);\r\n                continue;\r\n            }\r\n\r\n            let angle = i * frequency;\r\n            let amp = Math.sin(angle);\r\n\r\n            let processedSample = sample * amp;\r\n            processedBuffer.push(processedSample);\r\n        }\r\n\r\n        return processedBuffer;\r\n    }\r\n\r\n    saveByteArray(data : any)\r\n    {\r\n        let blob = new Blob([data], {type: \"image/bmp\"});\r\n        let url = window.URL.createObjectURL(blob);\r\n\r\n        State.addDownload(url);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}