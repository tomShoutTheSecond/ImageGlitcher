{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.downloads = [];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"fileInput\",\n      type: \"file\",\n      id: \"files\",\n      name: \"file\",\n      onChange: () => this.loadImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }), this.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"li\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 70\n      }\n    }, download))));\n  }\n\n  loadImage() {\n    let fileInput = this.refs.fileInput;\n    let imageFile = fileInput.files[0];\n    let fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(imageFile);\n\n    fileReader.onloadend = () => {\n      //get data from file\n      let result = fileReader.result; //let rawData = new Int16Array(result);\n\n      console.log(result);\n      /*\n      //decode data\n      //@ts-ignore\n      let decodedFile = alawmulaw.mulaw.decode(rawData);\n      console.log(decodedFile);\n       //encode data\n      //@ts-ignore\n      let encodedFile = alawmulaw.mulaw.encode(decodedFile);\n      console.log(encodedFile);\n      */\n\n      let array = new Uint8Array(result);\n      console.log(\"bish\", array);\n      this.saveByteArray(array);\n      console.log(\"bash\");\n    };\n    /*\n    //check for the various File API support.\n    if(!(window.File && window.FileReader && window.FileList && window.Blob))\n    {\n        alert('The File APIs are not fully supported in this browser.');\n        return;\n    }\n    */\n\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob(data, {\n      type: \"octet/stream\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    this.downloads.push(url);\n    this.setState({});\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/App.tsx"],"names":["React","App","Component","downloads","render","loadImage","map","download","key","fileInput","refs","imageFile","files","fileReader","FileReader","readAsArrayBuffer","onloadend","result","console","log","array","Uint8Array","saveByteArray","data","blob","Blob","type","url","window","URL","createObjectURL","push","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,WAAP;;AAGA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CACA;AAAA;AAAA;AAAA,SACIC,SADJ,GAC0B,EAD1B;AAAA;;AAGIC,EAAAA,MAAM,GACN;AACI,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAC,WAAX;AAAuB,MAAA,IAAI,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAC,OAAtC;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAA0D,MAAA,QAAQ,EAAE,MAAM,KAAKC,SAAL,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKF,SAAL,CAAeG,GAAf,CAAmB,CAACC,QAAD,EAAWC,GAAX,kBAAmB;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc;AAAG,MAAA,IAAI,EAAED,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBA,QAApB,CAAd,CAAtC,CAFL,CADJ;AAMH;;AAEDF,EAAAA,SAAS,GACT;AACI,QAAII,SAAS,GAAG,KAAKC,IAAL,CAAUD,SAA1B;AACA,QAAIE,SAAS,GAAGF,SAAS,CAACG,KAAV,CAAiB,CAAjB,CAAhB;AAEA,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;AACAD,IAAAA,UAAU,CAACE,iBAAX,CAA6BJ,SAA7B;;AAEAE,IAAAA,UAAU,CAACG,SAAX,GAAuB,MACvB;AACI;AACA,UAAIC,MAAM,GAAGJ,UAAU,CAACI,MAAxB,CAFJ,CAGI;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA;;;;;;;;;;;AAWA,UAAIG,KAAK,GAAG,IAAIC,UAAJ,CAAeJ,MAAf,CAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,KAApB;AACA,WAAKE,aAAL,CAAmBF,KAAnB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,KArBD;AAuBA;;;;;;;;;AAWH;;AAEDG,EAAAA,aAAa,CAACC,IAAD,EACb;AACI,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAT,EAAe;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAf,CAAX;AACA,QAAIC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BN,IAA3B,CAAV;AAEA,SAAKrB,SAAL,CAAe4B,IAAf,CAAoBJ,GAApB;AAEA,SAAKK,QAAL,CAAc,EAAd;AACH;;AAjEL;;AAoEA,eAAe/B,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nclass App extends React.Component\n{\n    downloads: string[] = [];\n\n    render()\n    {\n        return (\n            <div>\n                <input ref=\"fileInput\" type=\"file\" id=\"files\" name=\"file\" onChange={() => this.loadImage()}/>\n                {this.downloads.map((download, key) => <li key={key}><a href={download}>{download}</a></li>)}\n            </div>\n        );\n    }\n\n    loadImage()\n    {\n        let fileInput = this.refs.fileInput as HTMLInputElement;\n        let imageFile = fileInput.files![0];\n        \n        let fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(imageFile);\n\n        fileReader.onloadend = () =>\n        {\n            //get data from file\n            let result = fileReader.result as ArrayBuffer;\n            //let rawData = new Int16Array(result);\n            console.log(result);\n            /*\n            //decode data\n            //@ts-ignore\n            let decodedFile = alawmulaw.mulaw.decode(rawData);\n            console.log(decodedFile);\n\n            //encode data\n            //@ts-ignore\n            let encodedFile = alawmulaw.mulaw.encode(decodedFile);\n            console.log(encodedFile);\n            */\n            let array = new Uint8Array(result);\n            console.log(\"bish\", array);\n            this.saveByteArray(array);\n            console.log(\"bash\");\n        }\n        \n        /*\n        //check for the various File API support.\n        if(!(window.File && window.FileReader && window.FileList && window.Blob))\n        {\n            alert('The File APIs are not fully supported in this browser.');\n            return;\n        }\n        */\n\n\n\n    }\n\n    saveByteArray(data : any)\n    {\n        let blob = new Blob(data, {type: \"octet/stream\"});\n        let url = window.URL.createObjectURL(blob);\n\n        this.downloads.push(url);\n\n        this.setState({});\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}