{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport { ImageLoader } from './ImageLoader';\nimport { ImageProcessor } from './ImageProcessor';\nexport class State {\n  static setImageData(imageData) {\n    this.appInstance.setState({\n      imageData: imageData\n    });\n  }\n\n}\nState.appInstance = void 0;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageData: [],\n      downloads: []\n    };\n  }\n\n  componentDidMount() {\n    //provide App reference to State\n    State.appInstance = this;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ImageLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ImageProcessor, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), this.state.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: download,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      download: \"image.bmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }, \"image-\" + key))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/App.tsx"],"names":["React","ImageLoader","ImageProcessor","State","setImageData","imageData","appInstance","setState","App","Component","state","downloads","componentDidMount","render","map","download","key"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,KAAN,CACP;AAGI,SAAOC,YAAP,CAAoBC,SAApB,EACA;AACI,SAAKC,WAAL,CAAiBC,QAAjB,CAA0B;AAACF,MAAAA,SAAS,EAAEA;AAAZ,KAA1B;AACH;;AANL;AADaF,K,CAEFG,W;;AAmBX,MAAME,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CACA;AAAA;AAAA;AAAA,SACIC,KADJ,GACY;AAAEL,MAAAA,SAAS,EAAE,EAAb;AAAiBM,MAAAA,SAAS,EAAE;AAA5B,KADZ;AAAA;;AAGIC,EAAAA,iBAAiB,GACjB;AACI;AACAT,IAAAA,KAAK,CAACG,WAAN,GAAoB,IAApB;AACH;;AAEDO,EAAAA,MAAM,GACN;AACI,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGK,KAAKH,KAAL,CAAWC,SAAX,CAAqBG,GAArB,CAAyB,CAACC,QAAD,EAAWC,GAAX,kBACtB;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAED,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAG,MAAA,IAAI,EAAEA,QAAT;AAAmB,MAAA,QAAQ,EAAC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,WAAWC,GAApD,CAFJ,CADH,CAHL,CADJ;AAYH;;AAvBL;;AA0BA,eAAeR,GAAf","sourcesContent":["import React from 'react';\nimport { ImageLoader } from './ImageLoader';\nimport { ImageProcessor } from './ImageProcessor';\n\nexport class State\n{\n    static appInstance : App;\n\n    static setImageData(imageData : Uint8Array)\n    {\n        this.appInstance.setState({imageData: imageData});\n    }\n}\n\ninterface AppProps\n{\n\n}\n\ninterface AppState\n{\n    imageData : Uint8Array,\n    downloads : string[]\n}\n\nclass App extends React.Component<AppProps, AppState>\n{\n    state = { imageData: [], downloads: []};\n\n    componentDidMount()\n    {\n        //provide App reference to State\n        State.appInstance = this;\n    }\n\n    render()\n    {\n        return (\n            <div>\n                <ImageLoader />\n                <ImageProcessor />\n                {this.state.downloads.map((download, key) => \n                    <div key={key}>\n                        <img src={download}></img>\n                        <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}