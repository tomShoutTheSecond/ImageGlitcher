{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\ImageProcessor.tsx\";\nimport React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\nimport { Util } from './Util';\nimport { DownloadArea } from './DownloadArea';\nexport class ImageProcessor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewUrl: \"\"\n    };\n  }\n\n  render() {\n    let containerStyle = {\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: Colors.border,\n      display: \"inline-block\"\n    };\n    let innerContainerStyle = {\n      paddingBottom: \"16px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: Styles.h1Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, \"Process Image\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, \"Frames\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"frames\",\n      ref: \"framesInput\",\n      type: \"number\",\n      defaultValue: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 56\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"startFreq\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, \"Start Frequency\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"startFreq\",\n      ref: \"startFreqInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 68\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"endFreq\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, \"End Frequency\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"endFreq\",\n      ref: \"endFreqInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 64\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"startPhase\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \"Start Phase\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"startPhase\",\n      ref: \"startPhaseInput\",\n      type: \"number\",\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"endPhase\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"End Phase\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"endPhase\",\n      ref: \"endPhaseInput\",\n      type: \"number\",\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.processAnimation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"Process Animation\"));\n  }\n\n  processAnimation() {\n    var _DownloadArea$instanc;\n\n    //clear downloads area\n    State.clearDownloads();\n    let framesInput = this.refs.framesInput;\n    let frames = parseInt(framesInput.value);\n    let startFreqInput = this.refs.startFreqInput;\n    let endFreqInput = this.refs.endFreqInput;\n    let startPhaseInput = this.refs.startPhaseInput;\n    let endPhaseInput = this.refs.endPhaseInput;\n    let startFreq = parseFloat(startFreqInput.value);\n    let endFreq = parseFloat(endFreqInput.value);\n    let startPhase = parseFloat(startPhaseInput.value);\n    let endPhase = parseFloat(endPhaseInput.value);\n\n    for (let i = 0; i < frames; i++) {\n      let progress = i / frames;\n      let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\n      let framePhase = Util.mixNumber(startPhase, endPhase, progress);\n      this.processFrame(frameFrequency, framePhase);\n    }\n\n    (_DownloadArea$instanc = DownloadArea.instance) === null || _DownloadArea$instanc === void 0 ? void 0 : _DownloadArea$instanc.createGif();\n  }\n\n  processFrame(frequency, phase) {\n    //get data from file\n    let rawData = this.props.imageData; //decode data\n    //@ts-ignore\n\n    let decodedFile = alawmulaw.mulaw.decode(rawData); //process data\n\n    let processedData = this.bufferProcess(decodedFile, frequency, phase); //encode data\n    //@ts-ignore\n\n    let encodedFile = alawmulaw.mulaw.encode(processedData);\n    this.saveByteArray(encodedFile);\n  }\n\n  bufferProcess(buffer, frequency, phase) {\n    let headerLength = 54;\n    let processedBuffer = [];\n\n    for (let i = 0; i < buffer.length; i++) {\n      const sample = buffer[i];\n\n      if (i < headerLength) {\n        processedBuffer.push(sample);\n        continue;\n      }\n\n      let angle = phase + i * frequency;\n      let amp = Math.sin(angle);\n      let processedSample = sample * amp;\n      processedBuffer.push(processedSample);\n    }\n\n    return processedBuffer;\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob([data], {\n      type: \"image/bmp\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    State.addDownload(url);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/ImageProcessor.tsx"],"names":["React","State","Colors","Styles","Util","DownloadArea","ImageProcessor","Component","state","previewUrl","render","containerStyle","padding","background","borderWidth","borderStyle","borderColor","border","display","innerContainerStyle","paddingBottom","h1Style","processAnimation","clearDownloads","framesInput","refs","frames","parseInt","value","startFreqInput","endFreqInput","startPhaseInput","endPhaseInput","startFreq","parseFloat","endFreq","startPhase","endPhase","i","progress","frameFrequency","mixNumber","framePhase","processFrame","instance","createGif","frequency","phase","rawData","props","imageData","decodedFile","alawmulaw","mulaw","decode","processedData","bufferProcess","encodedFile","encode","saveByteArray","buffer","headerLength","processedBuffer","length","sample","push","angle","amp","Math","sin","processedSample","data","blob","Blob","type","url","window","URL","createObjectURL","addDownload"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\nimport { Util } from './Util';\r\nimport { DownloadArea } from './DownloadArea';\r\n\r\ninterface ImageProcessorProps\r\n{\r\n    imageData : Uint8Array\r\n}\r\n\r\nexport class ImageProcessor extends React.Component<ImageProcessorProps>\r\n{\r\n    state = { previewUrl: \"\" };\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            padding: \"16px\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let innerContainerStyle : React.CSSProperties = \r\n        {\r\n            paddingBottom: \"16px\"\r\n        };\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Process Image</h1>\r\n                <label htmlFor=\"frames\">Frames</label> <input id=\"frames\" ref=\"framesInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startFreq\">Start Frequency</label> <input id=\"startFreq\" ref=\"startFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <label htmlFor=\"endFreq\">End Frequency</label> <input id=\"endFreq\" ref=\"endFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startPhase\">Start Phase</label> <input id=\"startPhase\" ref=\"startPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <label htmlFor=\"endPhase\">End Phase</label> <input id=\"endPhase\" ref=\"endPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <br />\r\n                <button onClick={() => this.processAnimation()}>Process Animation</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    processAnimation()\r\n    {\r\n        //clear downloads area\r\n        State.clearDownloads();\r\n\r\n        let framesInput = this.refs.framesInput as HTMLInputElement;\r\n\r\n        let frames = parseInt(framesInput.value);\r\n\r\n        let startFreqInput = this.refs.startFreqInput as HTMLInputElement;\r\n        let endFreqInput = this.refs.endFreqInput as HTMLInputElement;\r\n        let startPhaseInput = this.refs.startPhaseInput as HTMLInputElement;\r\n        let endPhaseInput = this.refs.endPhaseInput as HTMLInputElement;\r\n\r\n        let startFreq = parseFloat(startFreqInput.value);\r\n        let endFreq = parseFloat(endFreqInput.value);\r\n        let startPhase = parseFloat(startPhaseInput.value);\r\n        let endPhase = parseFloat(endPhaseInput.value);\r\n\r\n        for (let i = 0; i < frames; i++) \r\n        {\r\n            let progress = i / frames;\r\n            let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\r\n            let framePhase = Util.mixNumber(startPhase, endPhase, progress);\r\n            this.processFrame(frameFrequency, framePhase);\r\n        }\r\n\r\n        DownloadArea.instance?.createGif();\r\n    }\r\n\r\n    processFrame(frequency : number, phase : number)\r\n    {\r\n        //get data from file\r\n        let rawData = this.props.imageData;\r\n        \r\n        //decode data\r\n        //@ts-ignore\r\n        let decodedFile = alawmulaw.mulaw.decode(rawData);\r\n\r\n        //process data\r\n        let processedData = this.bufferProcess(decodedFile, frequency, phase);\r\n\r\n        //encode data\r\n        //@ts-ignore\r\n        let encodedFile = alawmulaw.mulaw.encode(processedData);\r\n        \r\n        this.saveByteArray(encodedFile);\r\n    }\r\n\r\n    bufferProcess(buffer : any, frequency : number, phase : number)\r\n    {\r\n        let headerLength = 54;\r\n\r\n        let processedBuffer = [];\r\n        for (let i = 0; i < buffer.length; i++) \r\n        {\r\n            const sample = buffer[i];\r\n\r\n            if(i < headerLength)\r\n            {\r\n                processedBuffer.push(sample);\r\n                continue;\r\n            }\r\n\r\n            let angle = phase + i * frequency;\r\n            let amp = Math.sin(angle);\r\n\r\n            let processedSample = sample * amp;\r\n            processedBuffer.push(processedSample);\r\n        }\r\n\r\n        return processedBuffer;\r\n    }\r\n\r\n    saveByteArray(data : any)\r\n    {\r\n        let blob = new Blob([data], {type: \"image/bmp\"});\r\n        let url = window.URL.createObjectURL(blob);\r\n\r\n        State.addDownload(url);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}