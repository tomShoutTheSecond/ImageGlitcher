{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\ImageProcessor.tsx\";\nimport React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\nimport { Util } from './Util';\nimport { FramePreview } from './FramePreview';\nexport class ImageProcessor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewUrl: \"\"\n    };\n  }\n\n  render() {\n    let containerStyle = {\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: Colors.border,\n      display: \"inline-block\"\n    };\n    let bigButtonStyle = {\n      color: Colors.accent,\n      background: Colors.fill,\n      border: \"none\",\n      fontSize: \"16px\",\n      padding: \"16px\",\n      float: \"right\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: Styles.h1Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, \"Process Image\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"frames\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, \"Frames\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"frames\",\n      ref: \"framesInput\",\n      type: \"number\",\n      defaultValue: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 56\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"boomerang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, \"Boomerang\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"boomerang\",\n      ref: \"boomerangInput\",\n      type: \"checkbox\",\n      defaultValue: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      style: Styles.h2Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, \"Amplitude Modulation\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"startFreq\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Start Frequency\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"startFreq\",\n      ref: \"startFreqInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 68\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"endFreq\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"End Frequency\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"endFreq\",\n      ref: \"endFreqInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 64\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"startPhase\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Start Phase\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"startPhase\",\n      ref: \"startPhaseInput\",\n      type: \"number\",\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"endPhase\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"End Phase\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"endPhase\",\n      ref: \"endPhaseInput\",\n      type: \"number\",\n      defaultValue: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"startAmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"Start Amp\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"startAmp\",\n      ref: \"startAmpInput\",\n      type: \"number\",\n      defaultValue: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"endAmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \"End Amp\"), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"endAmp\",\n      ref: \"endAmpInput\",\n      type: \"number\",\n      defaultValue: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      style: bigButtonStyle,\n      onClick: () => this.prepareToProcessAnimation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, \"Process\"));\n  }\n\n  prepareToProcessAnimation() {\n    //clear downloads area\n    State.clearDownloads();\n    State.setFrameLoadingState(true); //wait to let renderer catch up\n\n    let waitTime = 200;\n    setTimeout(() => this.processAnimation(), waitTime);\n  }\n\n  processAnimation() {\n    let framesInput = this.refs.framesInput;\n    let frames = parseInt(framesInput.value);\n    let startFreqInput = this.refs.startFreqInput;\n    let endFreqInput = this.refs.endFreqInput;\n    let startPhaseInput = this.refs.startPhaseInput;\n    let endPhaseInput = this.refs.endPhaseInput;\n    let startAmpInput = this.refs.startAmpInput;\n    let endAmpInput = this.refs.endAmpInput;\n    let startFreq = parseFloat(startFreqInput.value);\n    let endFreq = parseFloat(endFreqInput.value);\n    let startPhase = parseFloat(startPhaseInput.value);\n    let endPhase = parseFloat(endPhaseInput.value);\n    let startAmp = parseFloat(startAmpInput.value);\n    let endAmp = parseFloat(endAmpInput.value);\n\n    for (let i = 0; i < frames; i++) {\n      let progress = i / frames;\n      let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\n      let framePhase = Util.mixNumber(startPhase, endPhase, progress);\n      let frameAmp = Util.mixNumber(startAmp, endAmp, progress);\n      this.processFrame(frameFrequency, framePhase, frameAmp);\n    }\n\n    State.setFrameLoadingState(false); //create animation (once image previews are loaded)\n\n    let waitTime = 1000;\n    setTimeout(() => {\n      var _FramePreview$instanc;\n\n      return (_FramePreview$instanc = FramePreview.instance) === null || _FramePreview$instanc === void 0 ? void 0 : _FramePreview$instanc.createGif();\n    }, waitTime);\n  }\n\n  processFrame(frequency, phase, amp) {\n    //get data from file\n    let rawData = this.props.imageData; //decode data\n    //@ts-ignore\n\n    let decodedFile = alawmulaw.mulaw.decode(rawData); //process data\n\n    let processedData = this.bufferProcess(decodedFile, frequency, phase, amp); //encode data\n    //@ts-ignore\n\n    let encodedFile = alawmulaw.mulaw.encode(processedData);\n    this.saveByteArray(encodedFile);\n  }\n\n  bufferProcess(buffer, frequency, phase, amp) {\n    let headerLength = 54;\n    let processedBuffer = [];\n\n    for (let i = 0; i < buffer.length; i++) {\n      const sample = buffer[i];\n\n      if (i < headerLength) {\n        processedBuffer.push(sample);\n        continue;\n      }\n\n      let angle = phase + i * frequency;\n      let coef = Math.sin(angle) * amp;\n      let processedSample = sample * coef;\n      processedBuffer.push(processedSample);\n    }\n\n    return processedBuffer;\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob([data], {\n      type: \"image/bmp\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    State.addDownload(url);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/ImageProcessor.tsx"],"names":["React","State","Colors","Styles","Util","FramePreview","ImageProcessor","Component","state","previewUrl","render","containerStyle","padding","background","borderWidth","borderStyle","borderColor","border","display","bigButtonStyle","color","accent","fill","fontSize","float","h1Style","h2Style","prepareToProcessAnimation","clearDownloads","setFrameLoadingState","waitTime","setTimeout","processAnimation","framesInput","refs","frames","parseInt","value","startFreqInput","endFreqInput","startPhaseInput","endPhaseInput","startAmpInput","endAmpInput","startFreq","parseFloat","endFreq","startPhase","endPhase","startAmp","endAmp","i","progress","frameFrequency","mixNumber","framePhase","frameAmp","processFrame","instance","createGif","frequency","phase","amp","rawData","props","imageData","decodedFile","alawmulaw","mulaw","decode","processedData","bufferProcess","encodedFile","encode","saveByteArray","buffer","headerLength","processedBuffer","length","sample","push","angle","coef","Math","sin","processedSample","data","blob","Blob","type","url","window","URL","createObjectURL","addDownload"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\nimport { Util } from './Util';\r\nimport { FramePreview } from './FramePreview';\r\n\r\ninterface ImageProcessorProps\r\n{\r\n    imageData : Uint8Array\r\n}\r\n\r\nexport class ImageProcessor extends React.Component<ImageProcessorProps>\r\n{\r\n    state = { previewUrl: \"\" };\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            padding: \"16px\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let bigButtonStyle : React.CSSProperties = \r\n        {\r\n            color: Colors.accent,\r\n            background: Colors.fill,\r\n            border: \"none\",\r\n            fontSize: \"16px\",\r\n            padding: \"16px\",\r\n            float: \"right\"\r\n        };\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Process Image</h1>\r\n                <label htmlFor=\"frames\">Frames</label> <input id=\"frames\" ref=\"framesInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <label htmlFor=\"boomerang\">Boomerang</label> <input id=\"boomerang\" ref=\"boomerangInput\" type=\"checkbox\" defaultValue=\"true\"/>\r\n                <br />\r\n                <br />\r\n                <h2 style={Styles.h2Style}>Amplitude Modulation</h2>\r\n                <label htmlFor=\"startFreq\">Start Frequency</label> <input id=\"startFreq\" ref=\"startFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <label htmlFor=\"endFreq\">End Frequency</label> <input id=\"endFreq\" ref=\"endFreqInput\" type=\"number\" defaultValue=\"0.01\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startPhase\">Start Phase</label> <input id=\"startPhase\" ref=\"startPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <label htmlFor=\"endPhase\">End Phase</label> <input id=\"endPhase\" ref=\"endPhaseInput\" type=\"number\" defaultValue=\"0\"/>\r\n                <br />\r\n                <br />\r\n                <label htmlFor=\"startAmp\">Start Amp</label> <input id=\"startAmp\" ref=\"startAmpInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <label htmlFor=\"endAmp\">End Amp</label> <input id=\"endAmp\" ref=\"endAmpInput\" type=\"number\" defaultValue=\"1\"/>\r\n                <br />\r\n                <br />\r\n                <button style={bigButtonStyle} onClick={() => this.prepareToProcessAnimation()}>Process</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    prepareToProcessAnimation()\r\n    {\r\n        //clear downloads area\r\n        State.clearDownloads();\r\n        State.setFrameLoadingState(true);\r\n\r\n        //wait to let renderer catch up\r\n        let waitTime = 200;\r\n        setTimeout(() => this.processAnimation(), waitTime);\r\n    }\r\n\r\n    processAnimation()\r\n    {\r\n        let framesInput = this.refs.framesInput as HTMLInputElement;\r\n\r\n        let frames = parseInt(framesInput.value);\r\n\r\n        let startFreqInput = this.refs.startFreqInput as HTMLInputElement;\r\n        let endFreqInput = this.refs.endFreqInput as HTMLInputElement;\r\n        let startPhaseInput = this.refs.startPhaseInput as HTMLInputElement;\r\n        let endPhaseInput = this.refs.endPhaseInput as HTMLInputElement;\r\n        let startAmpInput = this.refs.startAmpInput as HTMLInputElement;\r\n        let endAmpInput = this.refs.endAmpInput as HTMLInputElement;\r\n\r\n        let startFreq = parseFloat(startFreqInput.value);\r\n        let endFreq = parseFloat(endFreqInput.value);\r\n        let startPhase = parseFloat(startPhaseInput.value);\r\n        let endPhase = parseFloat(endPhaseInput.value);\r\n        let startAmp = parseFloat(startAmpInput.value);\r\n        let endAmp = parseFloat(endAmpInput.value);\r\n\r\n        for (let i = 0; i < frames; i++) \r\n        {\r\n            let progress = i / frames;\r\n            let frameFrequency = Util.mixNumber(startFreq, endFreq, progress);\r\n            let framePhase = Util.mixNumber(startPhase, endPhase, progress);\r\n            let frameAmp = Util.mixNumber(startAmp, endAmp, progress);\r\n\r\n            this.processFrame(frameFrequency, framePhase, frameAmp);\r\n        }\r\n\r\n        State.setFrameLoadingState(false);\r\n\r\n        //create animation (once image previews are loaded)\r\n        let waitTime = 1000;\r\n        setTimeout(() => FramePreview.instance?.createGif(), waitTime);\r\n    }\r\n\r\n    processFrame(frequency : number, phase : number, amp : number)\r\n    {\r\n        //get data from file\r\n        let rawData = this.props.imageData;\r\n        \r\n        //decode data\r\n        //@ts-ignore\r\n        let decodedFile = alawmulaw.mulaw.decode(rawData);\r\n\r\n        //process data\r\n        let processedData = this.bufferProcess(decodedFile, frequency, phase, amp);\r\n\r\n        //encode data\r\n        //@ts-ignore\r\n        let encodedFile = alawmulaw.mulaw.encode(processedData);\r\n        \r\n        this.saveByteArray(encodedFile);\r\n    }\r\n\r\n    bufferProcess(buffer : any, frequency : number, phase : number, amp : number)\r\n    {\r\n        let headerLength = 54;\r\n\r\n        let processedBuffer = [];\r\n        for (let i = 0; i < buffer.length; i++) \r\n        {\r\n            const sample = buffer[i];\r\n\r\n            if(i < headerLength)\r\n            {\r\n                processedBuffer.push(sample);\r\n                continue;\r\n            }\r\n\r\n            let angle = phase + i * frequency;\r\n            let coef = Math.sin(angle) * amp;\r\n\r\n            let processedSample = sample * coef;\r\n            processedBuffer.push(processedSample);\r\n        }\r\n\r\n        return processedBuffer;\r\n    }\r\n\r\n    saveByteArray(data : any)\r\n    {\r\n        let blob = new Blob([data], {type: \"image/bmp\"});\r\n        let url = window.URL.createObjectURL(blob);\r\n\r\n        State.addDownload(url);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}