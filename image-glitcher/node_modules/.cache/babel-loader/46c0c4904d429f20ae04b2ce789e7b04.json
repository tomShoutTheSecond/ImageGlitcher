{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\ImageLoader.tsx\";\nimport React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nexport class ImageLoader extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      previewUrl: \"\"\n    };\n  }\n\n  render() {\n    let containerStyle = {\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderColor: Colors.border\n    };\n    let innerContainerStyle = {\n      padding: \"16px\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: innerContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"fileInput\",\n      type: \"file\",\n      id: \"files\",\n      name: \"file\",\n      onChange: () => this.loadImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.previewUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  loadImage() {\n    let fileInput = this.refs.fileInput;\n    let imageFile = fileInput.files[0];\n    let fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(imageFile);\n\n    fileReader.onloadend = () => {\n      //get data from file\n      let result = fileReader.result;\n      let rawData = new Uint8Array(result);\n      State.setImageData(rawData); //put preview in component\n\n      fileReader.readAsDataURL(imageFile);\n\n      fileReader.onloadend = () => {\n        this.setState({\n          previewUrl: fileReader.result\n        });\n      };\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/ImageLoader.tsx"],"names":["React","State","Colors","ImageLoader","Component","state","previewUrl","render","containerStyle","padding","background","borderWidth","borderColor","border","innerContainerStyle","loadImage","fileInput","refs","imageFile","files","fileReader","FileReader","readAsArrayBuffer","onloadend","result","rawData","Uint8Array","setImageData","readAsDataURL","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CACP;AAAA;AAAA;AAAA,SACIC,KADJ,GACY;AAAEC,MAAAA,UAAU,EAAE;AAAd,KADZ;AAAA;;AAGIC,EAAAA,MAAM,GACN;AACI,QAAIC,cAAoC,GACxC;AACIC,MAAAA,OAAO,EAAE,MADb;AAEIC,MAAAA,UAAU,EAAER,MAAM,CAACQ,UAFvB;AAGIC,MAAAA,WAAW,EAAE,CAHjB;AAIIC,MAAAA,WAAW,EAAEV,MAAM,CAACW;AAJxB,KADA;AAQA,QAAIC,mBAAyC,GAC7C;AACIL,MAAAA,OAAO,EAAE;AADb,KADA;AAKA,wBACI;AAAK,MAAA,KAAK,EAAED,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAEM,mBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAC,WAAX;AAAuB,MAAA,IAAI,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAC,OAAtC;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAA0D,MAAA,QAAQ,EAAE,MAAM,KAAKC,SAAL,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII;AAAK,MAAA,GAAG,EAAE,KAAKV,KAAL,CAAWC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AAEDS,EAAAA,SAAS,GACT;AACI,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUD,SAA1B;AACA,QAAIE,SAAS,GAAGF,SAAS,CAACG,KAAV,CAAiB,CAAjB,CAAhB;AAEA,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;AACAD,IAAAA,UAAU,CAACE,iBAAX,CAA6BJ,SAA7B;;AAEAE,IAAAA,UAAU,CAACG,SAAX,GAAuB,MACvB;AACI;AACA,UAAIC,MAAM,GAAGJ,UAAU,CAACI,MAAxB;AACA,UAAIC,OAAO,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAd;AACAvB,MAAAA,KAAK,CAAC0B,YAAN,CAAmBF,OAAnB,EAJJ,CAMI;;AACAL,MAAAA,UAAU,CAACQ,aAAX,CAAyBV,SAAzB;;AAEAE,MAAAA,UAAU,CAACG,SAAX,GAAuB,MACvB;AACI,aAAKM,QAAL,CAAc;AAACvB,UAAAA,UAAU,EAAEc,UAAU,CAACI;AAAxB,SAAd;AACH,OAHD;AAIH,KAdD;AAeH;;AAnDL","sourcesContent":["import React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\n\nexport class ImageLoader extends React.Component\n{\n    state = { previewUrl: \"\" };\n\n    render()\n    {\n        let containerStyle : React.CSSProperties = \n        {\n            padding: \"16px\",\n            background: Colors.background,\n            borderWidth: 1,\n            borderColor: Colors.border\n        };\n\n        let innerContainerStyle : React.CSSProperties = \n        {\n            padding: \"16px\"\n        };\n\n        return (\n            <div style={containerStyle}>\n                <div style={innerContainerStyle}>\n                    <input ref=\"fileInput\" type=\"file\" id=\"files\" name=\"file\" onChange={() => this.loadImage()}/>\n                </div>\n                <img src={this.state.previewUrl}/>\n            </div>\n        );\n    }\n\n    loadImage()\n    {\n        let fileInput = this.refs.fileInput as HTMLInputElement;\n        let imageFile = fileInput.files![0];\n        \n        let fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(imageFile);\n\n        fileReader.onloadend = () =>\n        {\n            //get data from file\n            let result = fileReader.result as ArrayBuffer;\n            let rawData = new Uint8Array(result);\n            State.setImageData(rawData);\n\n            //put preview in component\n            fileReader.readAsDataURL(imageFile);\n\n            fileReader.onloadend = () =>\n            {\n                this.setState({previewUrl: fileReader.result});\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}