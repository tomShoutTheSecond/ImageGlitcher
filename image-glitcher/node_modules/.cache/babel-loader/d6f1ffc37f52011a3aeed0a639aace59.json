{"ast":null,"code":"/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview mu-Law codec.\r\n */\n\n/** @module alawmulaw/mulaw */\n\n/**\r\n * @type {number}\r\n * @private\r\n */\nconst BIAS = 0x84;\n/**\r\n * @type {number}\r\n * @private\r\n */\n\nconst CLIP = 32635;\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\n\nconst encodeTable = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\n\nconst decodeTable = [0, 132, 396, 924, 1980, 4092, 8316, 16764];\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit mu-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\n\nexport function encodeSample(sample) {\n  /** @type {number} */\n  let sign;\n  /** @type {number} */\n\n  let exponent;\n  /** @type {number} */\n\n  let mantissa;\n  /** @type {number} */\n\n  let muLawSample;\n  /** get the sample into sign-magnitude **/\n\n  sign = sample >> 8 & 0x80;\n  if (sign != 0) sample = -sample;\n  /** convert from 16 bit linear to ulaw **/\n\n  sample = sample + BIAS;\n  if (sample > CLIP) sample = CLIP;\n  exponent = encodeTable[sample >> 7 & 0xFF];\n  mantissa = sample >> exponent + 3 & 0x0F;\n  muLawSample = ~(sign | exponent << 4 | mantissa);\n  /** return the result **/\n\n  return muLawSample;\n}\n/**\r\n * Decode a 8-bit mu-Law sample as 16-bit PCM.\r\n * @param {number} muLawSample The 8-bit mu-Law sample\r\n * @return {number}\r\n */\n\nexport function decodeSample(muLawSample) {\n  /** @type {number} */\n  let sign;\n  /** @type {number} */\n\n  let exponent;\n  /** @type {number} */\n\n  let mantissa;\n  /** @type {number} */\n\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = muLawSample & 0x80;\n  exponent = muLawSample >> 4 & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << exponent + 3);\n  if (sign != 0) sample = -sample;\n  return sample;\n}\n/**\r\n * Encode 16-bit linear PCM samples into 8-bit mu-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\n\nexport function encode(samples) {\n  /** @type {!Uint8Array} */\n  let muLawSamples = new Uint8Array(samples.length);\n\n  for (let i = 0; i < samples.length; i++) {\n    muLawSamples[i] = encodeSample(samples[i]);\n  }\n\n  return muLawSamples;\n}\n/**\r\n * Decode 8-bit mu-Law samples into 16-bit PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit mu-Law samples.\r\n * @return {!Int16Array}\r\n */\n\nexport function decode(samples) {\n  /** @type {!Int16Array} */\n  let pcmSamples = new Int16Array(samples.length);\n\n  for (let i = 0; i < samples.length; i++) {\n    pcmSamples[i] = decodeSample(samples[i]);\n  }\n\n  return pcmSamples;\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/node_modules/alawmulaw/lib/mulaw.js"],"names":["BIAS","CLIP","encodeTable","decodeTable","encodeSample","sample","sign","exponent","mantissa","muLawSample","decodeSample","encode","samples","muLawSamples","Uint8Array","length","i","decode","pcmSamples","Int16Array"],"mappings":"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","sourcesContent":["/*\r\n * alawmulaw: A-Law and mu-Law codecs in JavaScript.\r\n * https://github.com/rochars/alawmulaw\r\n *\r\n * Copyright (c) 2018-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview mu-Law codec.\r\n */\r\n\r\n/** @module alawmulaw/mulaw */\r\n\r\n/**\r\n * @type {number}\r\n * @private\r\n */\r\nconst BIAS = 0x84;\r\n/**\r\n * @type {number}\r\n * @private\r\n */\r\nconst CLIP = 32635;\r\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\r\nconst encodeTable = [\r\n    0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\r\n    4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\r\n    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\r\n    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\r\n    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];\r\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\r\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\r\n\r\n/**\r\n * Encode a 16-bit linear PCM sample as 8-bit mu-Law.\r\n * @param {number} sample A 16-bit PCM sample\r\n * @return {number}\r\n */\r\nexport function encodeSample(sample) {\r\n  /** @type {number} */\r\n  let sign;\r\n  /** @type {number} */\r\n  let exponent;\r\n  /** @type {number} */\r\n  let mantissa;\r\n  /** @type {number} */\r\n  let muLawSample;\r\n  /** get the sample into sign-magnitude **/\r\n  sign = (sample >> 8) & 0x80;\r\n  if (sign != 0) sample = -sample;\r\n  /** convert from 16 bit linear to ulaw **/\r\n  sample = sample + BIAS;\r\n  if (sample > CLIP) sample = CLIP;\r\n  exponent = encodeTable[(sample>>7) & 0xFF];\r\n  mantissa = (sample >> (exponent+3)) & 0x0F;\r\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\r\n  /** return the result **/\r\n  return muLawSample;\r\n}\r\n\r\n/**\r\n * Decode a 8-bit mu-Law sample as 16-bit PCM.\r\n * @param {number} muLawSample The 8-bit mu-Law sample\r\n * @return {number}\r\n */\r\nexport function decodeSample(muLawSample) {\r\n  /** @type {number} */\r\n  let sign;\r\n  /** @type {number} */\r\n  let exponent;\r\n  /** @type {number} */\r\n  let mantissa;\r\n  /** @type {number} */\r\n  let sample;\r\n  muLawSample = ~muLawSample;\r\n  sign = (muLawSample & 0x80);\r\n  exponent = (muLawSample >> 4) & 0x07;\r\n  mantissa = muLawSample & 0x0F;\r\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\r\n  if (sign != 0) sample = -sample;\r\n  return sample;\r\n}\r\n\r\n/**\r\n * Encode 16-bit linear PCM samples into 8-bit mu-Law samples.\r\n * @param {!Int16Array} samples A array of 16-bit PCM samples.\r\n * @return {!Uint8Array}\r\n */\r\nexport function encode(samples) {\r\n  /** @type {!Uint8Array} */\r\n  let muLawSamples = new Uint8Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    muLawSamples[i] = encodeSample(samples[i]);\r\n  }\r\n  return muLawSamples;\r\n}\r\n\r\n/**\r\n * Decode 8-bit mu-Law samples into 16-bit PCM samples.\r\n * @param {!Uint8Array} samples A array of 8-bit mu-Law samples.\r\n * @return {!Int16Array}\r\n */\r\nexport function decode(samples) {\r\n  /** @type {!Int16Array} */\r\n  let pcmSamples = new Int16Array(samples.length);\r\n  for (let i=0; i<samples.length; i++) {\r\n    pcmSamples[i] = decodeSample(samples[i]);\r\n  }\r\n  return pcmSamples;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}