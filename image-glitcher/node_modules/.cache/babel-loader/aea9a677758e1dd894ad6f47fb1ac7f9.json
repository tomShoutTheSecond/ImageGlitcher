{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\FramePreview.tsx\";\nimport React from 'react';\nimport { State } from './App';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\nimport ReactDOM from 'react-dom';\nexport class FramePreview extends React.Component {\n  componentDidMount() {\n    FramePreview.instance = this;\n  }\n\n  render() {\n    let containerStyle = {\n      margin: \"16px\",\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: Colors.border\n    };\n    let downloadContainerStyle = {\n      display: \"inline-block\"\n    };\n    let content = this.props.isLoading ? \"Loading frames...\" : this.props.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      style: downloadContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"downloadImg\",\n      src: download,\n      style: Styles.imageStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      download: \"image.bmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, \"image-\" + key)));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: Styles.h1Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Frames\"), content, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.createGif(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Convert to GIF\"));\n  }\n\n  createGif() {\n    State.setAnimationLoadingState(true); //first find the actual image size of the first frame\n\n    var newImg = new Image();\n\n    newImg.onload = () => {\n      let width = newImg.width;\n      let height = newImg.height; //@ts-ignore\n\n      let gif = new GIF({\n        workers: 2,\n        quality: 10,\n        width: width,\n        height: height\n      }); //add frames to gif\n\n      let imgElements = this.getImageElements();\n      imgElements.forEach(img => {\n        gif.addFrame(img, {\n          delay: 10\n        });\n      });\n      gif.on('finished', function (blob) {\n        let url = URL.createObjectURL(blob);\n        State.setAnimationUrl(url);\n        State.setAnimationLoadingState(false);\n      });\n      gif.render();\n    };\n\n    let firstImage = this.getImageElements()[0];\n    newImg.src = firstImage.src;\n  } //returns references to all the preview image elements in the download area\n\n\n  getImageElements() {\n    let thisNode = ReactDOM.findDOMNode(this);\n    return Array.from(thisNode.getElementsByClassName('downloadImg'));\n  }\n\n}\nFramePreview.instance = null;","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/FramePreview.tsx"],"names":["React","State","Colors","Styles","ReactDOM","FramePreview","Component","componentDidMount","instance","render","containerStyle","margin","padding","background","borderWidth","borderStyle","borderColor","border","downloadContainerStyle","display","content","props","isLoading","downloads","map","download","key","imageStyle","h1Style","createGif","setAnimationLoadingState","newImg","Image","onload","width","height","gif","GIF","workers","quality","imgElements","getImageElements","forEach","img","addFrame","delay","on","blob","url","URL","createObjectURL","setAnimationUrl","firstImage","src","thisNode","findDOMNode","Array","from","getElementsByClassName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\nimport ReactDOM from 'react-dom';\r\n\r\ninterface FramePreviewProps\r\n{\r\n    downloads : string[],\r\n    isLoading : boolean\r\n}\r\n\r\nexport class FramePreview extends React.Component<FramePreviewProps>\r\n{\r\n    static instance : FramePreview | null = null;\r\n\r\n    componentDidMount()\r\n    {\r\n        FramePreview.instance = this;\r\n    }\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            margin: \"16px\",\r\n            padding: \"16px\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n        };\r\n\r\n        let downloadContainerStyle : React.CSSProperties = \r\n        {\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        let content = this.props.isLoading ? \"Loading frames...\" : this.props.downloads.map((download, key) => \r\n            <div key={key} style={downloadContainerStyle}>\r\n                <img className=\"downloadImg\" src={download} style={Styles.imageStyle}></img>\r\n                <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\r\n            </div>\r\n        )\r\n        \r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Frames</h1>\r\n                {content}\r\n                <br />\r\n                <button onClick={() => this.createGif()}>Convert to GIF</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createGif()\r\n    {\r\n        State.setAnimationLoadingState(true);\r\n\r\n        //first find the actual image size of the first frame\r\n        var newImg = new Image();\r\n        newImg.onload = () =>\r\n        {\r\n            let width = newImg.width;\r\n            let height = newImg.height;\r\n\r\n            //@ts-ignore\r\n            let gif = new GIF(\r\n            {\r\n                workers: 2,\r\n                quality: 10,\r\n                width: width,\r\n                height: height\r\n            });\r\n\r\n            //add frames to gif\r\n            let imgElements = this.getImageElements();\r\n            imgElements.forEach(img => \r\n            {\r\n                gif.addFrame(img, {delay: 10});\r\n            });\r\n            \r\n            gif.on('finished', function(blob : Blob) \r\n            {\r\n                let url = URL.createObjectURL(blob);\r\n                State.setAnimationUrl(url);\r\n                State.setAnimationLoadingState(false);\r\n            });\r\n            \r\n            gif.render();\r\n        }\r\n\r\n        let firstImage = this.getImageElements()[0] as HTMLImageElement;\r\n        newImg.src = firstImage.src;\r\n    }\r\n\r\n    //returns references to all the preview image elements in the download area\r\n    getImageElements()\r\n    {\r\n        let thisNode = ReactDOM.findDOMNode(this)! as Element;\r\n        return Array.from(thisNode.getElementsByClassName('downloadImg'));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}