{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\App.tsx\";\nimport React from 'react';\n\nclass State {\n  static setImageData(imageData) {}\n\n}\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.downloads = [];\n  }\n\n  componentDidMount() {\n    //provide App reference to State\n    State.appInstance = this;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"fileInput\",\n      type: \"file\",\n      id: \"files\",\n      name: \"file\",\n      onChange: () => this.loadImage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"frequencyInput\",\n      type: \"number\",\n      defaultValue: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }), this.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: download,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      download: \"image.bmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, \"image-\" + key))));\n  }\n\n  loadImage() {\n    let fileInput = this.refs.fileInput;\n    let imageFile = fileInput.files[0];\n    let fileReader = new FileReader();\n    fileReader.readAsArrayBuffer(imageFile);\n\n    fileReader.onloadend = () => {\n      //get data from file\n      let result = fileReader.result;\n      let rawData = new Uint8Array(result);\n      console.log(rawData); //decode data\n      //@ts-ignore\n\n      let decodedFile = alawmulaw.mulaw.decode(rawData);\n      console.log(decodedFile); //process data\n\n      let processedData = this.bufferProcess(decodedFile); //encode data\n      //@ts-ignore\n\n      let encodedFile = alawmulaw.mulaw.encode(processedData);\n      console.log(encodedFile);\n      this.saveByteArray(encodedFile);\n    };\n  }\n\n  saveByteArray(data) {\n    let blob = new Blob([data], {\n      type: \"image/bmp\"\n    });\n    let url = window.URL.createObjectURL(blob);\n    this.downloads.push(url);\n    this.setState({});\n  }\n\n  bufferProcess(buffer) {\n    let headerLength = 4000;\n    let frequencyInput = this.refs.frequencyInput;\n    let frequency = parseFloat(frequencyInput.value);\n    let processedBuffer = [];\n\n    for (let i = 0; i < buffer.length; i++) {\n      const sample = buffer[i];\n\n      if (i < headerLength) {\n        processedBuffer.push(sample);\n        continue;\n      }\n\n      let angle = i * frequency;\n      let amp = Math.sin(angle);\n      let processedSample = sample * amp;\n      processedBuffer.push(processedSample);\n    }\n\n    return processedBuffer;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/App.tsx"],"names":["React","State","setImageData","imageData","App","Component","downloads","componentDidMount","appInstance","render","loadImage","map","download","key","fileInput","refs","imageFile","files","fileReader","FileReader","readAsArrayBuffer","onloadend","result","rawData","Uint8Array","console","log","decodedFile","alawmulaw","mulaw","decode","processedData","bufferProcess","encodedFile","encode","saveByteArray","data","blob","Blob","type","url","window","URL","createObjectURL","push","setState","buffer","headerLength","frequencyInput","frequency","parseFloat","value","processedBuffer","i","length","sample","angle","amp","Math","sin","processedSample"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass State\n{\n    static setImageData(imageData : Uint8Array)\n    {\n\n    }\n}\n\nclass App extends React.Component\n{\n    downloads : string[] = [];\n\n    componentDidMount()\n    {\n        //provide App reference to State\n        State.appInstance = this;\n    }\n\n    render()\n    {\n        return (\n            <div>\n                <input ref=\"fileInput\" type=\"file\" id=\"files\" name=\"file\" onChange={() => this.loadImage()}/>\n                <input ref=\"frequencyInput\" type=\"number\" defaultValue=\"0.01\"/>\n                {this.downloads.map((download, key) => \n                    <div key={key}>\n                        <img src={download}></img>\n                        <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    loadImage()\n    {\n        let fileInput = this.refs.fileInput as HTMLInputElement;\n        let imageFile = fileInput.files![0];\n        \n        let fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(imageFile);\n\n        fileReader.onloadend = () =>\n        {\n            //get data from file\n            let result = fileReader.result as ArrayBuffer;\n            let rawData = new Uint8Array(result);\n            console.log(rawData);\n            \n            //decode data\n            //@ts-ignore\n            let decodedFile = alawmulaw.mulaw.decode(rawData);\n            console.log(decodedFile);\n\n            //process data\n            let processedData = this.bufferProcess(decodedFile);\n\n            //encode data\n            //@ts-ignore\n            let encodedFile = alawmulaw.mulaw.encode(processedData);\n            console.log(encodedFile);\n            \n            this.saveByteArray(encodedFile);\n        }\n    }\n\n    saveByteArray(data : any)\n    {\n        let blob = new Blob([data], {type: \"image/bmp\"});\n        let url = window.URL.createObjectURL(blob);\n\n        this.downloads.push(url);\n\n        this.setState({});\n    }\n\n    bufferProcess(buffer : any)\n    {\n        let headerLength = 4000;\n\n        let frequencyInput = this.refs.frequencyInput as HTMLInputElement;\n        let frequency = parseFloat(frequencyInput.value);\n\n        let processedBuffer = [];\n        for (let i = 0; i < buffer.length; i++) \n        {\n            const sample = buffer[i];\n\n            if(i < headerLength)\n            {\n                processedBuffer.push(sample);\n                continue;\n            }\n\n            let angle = i * frequency;\n            let amp = Math.sin(angle);\n\n            let processedSample = sample * amp;\n            processedBuffer.push(processedSample);\n        }\n\n        return processedBuffer;\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}