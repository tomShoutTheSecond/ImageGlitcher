{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tom\\\\Documents\\\\Repos\\\\ImageGlitcher\\\\image-glitcher\\\\src\\\\DownloadArea.tsx\";\nimport React from 'react';\nimport { Colors } from './Colors';\nimport { Styles } from './Styles';\nexport class DownloadArea extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.imgRefs = [];\n  }\n\n  render() {\n    let containerStyle = {\n      padding: \"16px\",\n      background: Colors.background,\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: Colors.border\n    };\n    let downloadContainerStyle = {\n      display: \"inline-block\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: containerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: Styles.h1Style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, \"Downloads\"), this.props.downloads.map((download, key) => /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      style: downloadContainerStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      ref: ref => {\n        this.imgRefs[key] = ref;\n      },\n      src: download,\n      style: Styles.imageStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: download,\n      download: \"image.bmp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, \"image-\" + key))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.convertToGif(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, \"Convert to GIF\"));\n  }\n\n  convertToGif() {\n    //first find the actual image size of the first frame\n    var newImg = new Image();\n\n    newImg.onload = () => {\n      let height = newImg.height;\n      let width = newImg.width;\n      alert('The image size is ' + width + '*' + height);\n      return; //@ts-ignore\n\n      let gif = new GIF({\n        workers: 2,\n        quality: 10\n      });\n      this.imgRefs.forEach(imgRef => {\n        gif.addFrame(imgRef);\n      });\n      gif.on('finished', function (blob) {\n        window.open(URL.createObjectURL(blob));\n      });\n      gif.render();\n    };\n\n    newImg.src = this.imgRefs[0].src;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Tom/Documents/Repos/ImageGlitcher/image-glitcher/src/DownloadArea.tsx"],"names":["React","Colors","Styles","DownloadArea","Component","imgRefs","render","containerStyle","padding","background","borderWidth","borderStyle","borderColor","border","downloadContainerStyle","display","h1Style","props","downloads","map","download","key","ref","imageStyle","convertToGif","newImg","Image","onload","height","width","alert","gif","GIF","workers","quality","forEach","imgRef","addFrame","on","blob","window","open","URL","createObjectURL","src"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAOA,OAAO,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CACP;AAAA;AAAA;AAAA,SACIC,OADJ,GACmC,EADnC;AAAA;;AAGIC,EAAAA,MAAM,GACN;AACI,QAAIC,cAAoC,GACxC;AACIC,MAAAA,OAAO,EAAE,MADb;AAEIC,MAAAA,UAAU,EAAER,MAAM,CAACQ,UAFvB;AAGIC,MAAAA,WAAW,EAAE,CAHjB;AAIIC,MAAAA,WAAW,EAAE,OAJjB;AAKIC,MAAAA,WAAW,EAAEX,MAAM,CAACY;AALxB,KADA;AASA,QAAIC,sBAA4C,GAChD;AACIC,MAAAA,OAAO,EAAE;AADb,KADA;AAKA,wBACI;AAAK,MAAA,KAAK,EAAER,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAEL,MAAM,CAACc,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEK,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,CAACC,QAAD,EAAWC,GAAX,kBACtB;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,KAAK,EAAEP,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAGQ,GAAD,IAAS;AAAC,aAAKjB,OAAL,CAAagB,GAAb,IAAoBC,GAApB;AAAyB,OAA7C;AAA+C,MAAA,GAAG,EAAEF,QAApD;AAA8D,MAAA,KAAK,EAAElB,MAAM,CAACqB,UAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAG,MAAA,IAAI,EAAEH,QAAT;AAAmB,MAAA,QAAQ,EAAC,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,WAAWC,GAApD,CAFJ,CADH,CAFL,eAQI;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKG,YAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ,CADJ;AAYH;;AAEDA,EAAAA,YAAY,GACZ;AACI;AACA,QAAIC,MAAM,GAAG,IAAIC,KAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAChB;AACI,UAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;AACA,UAAIC,KAAK,GAAGJ,MAAM,CAACI,KAAnB;AACAC,MAAAA,KAAK,CAAE,uBAAqBD,KAArB,GAA2B,GAA3B,GAA+BD,MAAjC,CAAL;AAEA,aALJ,CAMI;;AACA,UAAIG,GAAG,GAAG,IAAIC,GAAJ,CACV;AACIC,QAAAA,OAAO,EAAE,CADb;AAEIC,QAAAA,OAAO,EAAE;AAFb,OADU,CAAV;AAMA,WAAK7B,OAAL,CAAa8B,OAAb,CAAqBC,MAAM,IAC3B;AACIL,QAAAA,GAAG,CAACM,QAAJ,CAAaD,MAAb;AACH,OAHD;AAKAL,MAAAA,GAAG,CAACO,EAAJ,CAAO,UAAP,EAAmB,UAASC,IAAT,EACnB;AACIC,QAAAA,MAAM,CAACC,IAAP,CAAYC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAZ;AACH,OAHD;AAKAR,MAAAA,GAAG,CAACzB,MAAJ;AACH,KAzBD;;AA2BAmB,IAAAA,MAAM,CAACmB,GAAP,GAAa,KAAKvC,OAAL,CAAa,CAAb,EAAgBuC,GAA7B;AACH;;AAjEL","sourcesContent":["import React from 'react';\r\nimport { State } from './App';\r\nimport { Colors } from './Colors';\r\nimport { Styles } from './Styles';\r\n\r\ninterface DownloadAreaProps\r\n{\r\n    downloads : string[]\r\n}\r\n\r\nexport class DownloadArea extends React.Component<DownloadAreaProps>\r\n{\r\n    imgRefs : HTMLImageElement[] = [];\r\n\r\n    render()\r\n    {\r\n        let containerStyle : React.CSSProperties = \r\n        {\r\n            padding: \"16px\",\r\n            background: Colors.background,\r\n            borderWidth: 1,\r\n            borderStyle: \"solid\",\r\n            borderColor: Colors.border,\r\n        };\r\n\r\n        let downloadContainerStyle : React.CSSProperties = \r\n        {\r\n            display: \"inline-block\"\r\n        };\r\n\r\n        return (\r\n            <div style={containerStyle}>\r\n                <h1 style={Styles.h1Style}>Downloads</h1>\r\n                {this.props.downloads.map((download, key) => \r\n                    <div key={key} style={downloadContainerStyle}>\r\n                        <img ref={(ref) => {this.imgRefs[key] = ref!}} src={download} style={Styles.imageStyle}></img>\r\n                        <a href={download} download=\"image.bmp\">{\"image-\" + key}</a>\r\n                    </div>\r\n                )}\r\n                <button onClick={() => this.convertToGif()}>Convert to GIF</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    convertToGif()\r\n    {\r\n        //first find the actual image size of the first frame\r\n        var newImg = new Image();\r\n        newImg.onload = () =>\r\n        {\r\n            let height = newImg.height;\r\n            let width = newImg.width;\r\n            alert ('The image size is '+width+'*'+height);\r\n\r\n            return;\r\n            //@ts-ignore\r\n            let gif = new GIF(\r\n            {\r\n                workers: 2,\r\n                quality: 10\r\n            });\r\n            \r\n            this.imgRefs.forEach(imgRef => \r\n            {\r\n                gif.addFrame(imgRef);\r\n            });\r\n            \r\n            gif.on('finished', function(blob : Blob) \r\n            {\r\n                window.open(URL.createObjectURL(blob));\r\n            });\r\n            \r\n            gif.render();\r\n        }\r\n\r\n        newImg.src = this.imgRefs[0].src;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}